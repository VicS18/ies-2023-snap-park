openapi: 3.0.3
info:
  title: SnapPark
  description: |-
    
    SnapPark REST API specification.
    
  version: 1.0.0
  
servers:
  - url: https://localhost:9090/api/v1


paths:
  /parks/{username}:
    post:
      tags:
        - park
      summary: Create a new park for a user
      operationId: addPark
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the user that is creating new park
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Park'
      responses:
        '201':
          description: Park created successfully.
        '400':
          description: Bad request. Check the request payload.
        '500':
          description: Internal server error.
    get:
      tags:
        - park
      summary: Get a list of all parks of user
      operationId: listParks
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the user that owns the parks
        - name: name
          in: query
          description: Filter parks by name
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParkId'
        '500':
          description: Internal server error
  /parks/{parkId}:
    put:
      tags:
        - park
      summary: Update information about a specific park
      operationId: updatePark
      parameters:
        - name: parkId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the park to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Park'
      responses:
        '200':
          description: Park updated successfully
        '400':
          description: Bad request. Check the request payload.
        '404':
          description: Park not found
        '500':
          description: Internal server error
    get:
      tags:
        - park
      summary: Get information about a specific park
      operationId: getParkInfo
      parameters:
        - name: parkId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the park to update
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Park'          
        '400':
          description: Bad request. Check the request payload.
        '404':
          description: Park not found
        '500':
          description: Internal server error
    delete:
      tags:
        - park
      summary: Delete a specific park
      operationId: deletePark
      parameters:
        - name: parkId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the park to delete
      responses:
        '204':
          description: Park deleted successfully
        '404':
          description: Park not found
        '500':
          description: Internal server error
  /parks/movements/{parkId}:
    get:
      tags:
          - park
      summary: Get a list of movements of cars in and out of park.
      operationId: getMovements
      parameters:
        - name: parkId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the park
        - name: limit
          in: query
          description: Size of list. Default = 50
          schema:
            type: integer
        - name: page
          in: query
          description: The n th page of entrances with specificied limit. Default = 1
          schema:
            type: integer
        - name: sensor
          in: query
          description: Filters movements by the specified sensor.
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movement'
        '500':
          description: Internal server error
          
  /parks/occupancies/{parkId}:
    get:
      tags:
          - park
      summary: Get an aray 
      operationId: getOccupancy
      parameters:
        - name: parkId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the park to update
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Occupancy'
        '500':
          description: Internal server error
  /parks/alarms/{parkId}:
    get:
      tags:
          - park
      summary: Get an aray 
      operationId: getAlarms
      parameters:
        - name: parkId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the park to update
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alert'
        '500':
          description: Internal server error
  /parks/sensors/{parkId}/{sensor}:
    put:
      tags:
        - sensor
      summary: Associates sensor to park
      operationId: bindSensor
      parameters:
        - name: parkId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the park.
        - name: sensor
          in: path
          required: true
          schema:
            type: string
          description: The sensor.
      responses:
        '200':
          description: Bind successfully
        '404':
          description: Park not found
        '405':
          description: Sensor not found
        '500':
          description: Internal server error
          
          
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully.
        '400':
          description: Bad request. Check the request payload.
        '500':
          description: Internal server error.
  /users/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          

        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

components:
  schemas:
    Park:
      type: object
      properties:
        name:
          type: string
          description: Name of park.
        address:
          type: string
          description: Address of park.
        latitude:
          type: number
          description: Latitude of park.
        longitude:
          type: number
          description: Longitude of park.
        entranceFee:
          type: number
          description: The tax for the park.
        maxLotation:
          type: integer
          description: Max lotation of park.
    ParkId:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          description: Name of park.
        address:
          type: string
          description: Address of park.
        latitude:
          type: number
          description: Latitude of park.
        longitude:
          type: number
          description: Longitude of park.
        entranceFee:
          type: number
          description: The tax for the park.
        maxLotation:
          type: integer
          description: Max lotation of park.
          
    User:
      type: object
      properties:
        name:
          type: string
          example: theUser
        password:
          type: string
          example: '12345'
      xml:
        name: user
        
    Movement:
      type: object
      properties:
        parkId:
          type: integer
          example: 12345
        sensor:
          type: string
          example: 54321
        user:
          type: string
          example: theUser
        isEntrance:
          type: boolean
        date:
          type: string
          format: date
    
    Occupancy:
      type: object
      properties:
        date:
          type: string
          format: date
        lotation:
          type: integer
          example: 100
          
    Alert:
      type: object
      properties:
        text:
          type: string
          example: too many cars
        date:
          type: string
          format: date
